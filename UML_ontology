@startuml

skinparam linetype polyline

title Motiva Framework Ontology

hide empty methods
hide empty attributes
hide empty members

left to right direction

package Metrics #ffe8e8ff {
  class Metric {
    +timestamp: DateTime
    +value: float
  }

  ' Concept specializations (optional but handy)
  object DailyAdherence
  DailyAdherence --> Metric : "instance of"

  object WeeklyAdherence
  WeeklyAdherence --> Metric : "instance of"

  ' Computation is aware of the scope it targets
  class MetricComputation {
    +algorithm: String
  }
  MetricComputation --> Metric : "produces"

  object MechanicUsageRate
  MechanicUsageRate : timestamp = 2023-10-01T12:00:00Z
  MechanicUsageRate --> Metric : "instance of"

  object MechanicDisplayRate
  MechanicDisplayRate : timestamp = 2023-10-01T12:00:00Z
  MechanicDisplayRate --> Metric : "instance of"

  object MechanicEngagement
  MechanicEngagement : timestamp = 2023-10-01T12:00:00Z
  MechanicEngagement --> Metric : "instance of"

  object SessionDuration
  SessionDuration : mechanicId = 101
  SessionDuration : timestamp = 2025-04-21T09:00:00Z
  SessionDuration --> Metric : "instance of"

  object ClickRate
  ClickRate : mechanicId = 101
  ClickRate : timestamp = 2025-04-21T09:00:00Z
  ClickRate --> Metric : "instance of"

  object Adherence
  Adherence : timestamp = 2023-10-01T12:00:00Z
  Adherence --> Metric : "instance of"

  object HesitationTime
  HesitationTime : timestamp = 2023-10-01T12:00:00Z
  HesitationTime --> Metric : "instance of"
}

package KeySituations #e8faffff {
  class KeySituation {
    +timestamp: DateTime
    +screen: String
  }

  object MechanicDisplayedKeySituation
  MechanicDisplayedKeySituation --> KeySituation : "instance of"

  object MechanicInteractionKeySituation
  MechanicInteractionKeySituation --> KeySituation : "instance of"

  object MilestoneReachedKeySituation
  MilestoneReachedKeySituation --> KeySituation : "instance of"

  object DailyChallengePosedKeySituation
  DailyChallengePosedKeySituation --> KeySituation : "instance of"

  object SessionStartedKeySituation
  SessionStartedKeySituation --> KeySituation : "instance of"
  
  object TaskStartedKeySituation
  TaskStartedKeySituation --> KeySituation : "instance of"

  object TaskFinishedKeySituation
  TaskFinishedKeySituation --> KeySituation : "instance of"

  object SessionEndedKeySituation
  SessionEndedKeySituation --> KeySituation : "instance of"

  note left of KeySituation
  Generic KeySituation structure used for multiple behavioral logs,
  such as screen visits, mechanic usage, and session tracking.
  end note
}

package Interventions #e8e8ffff {
  class Intervention {
    
  }

  note right of Intervention
  Represents a planned activity, stimulus, or interaction
  aimed at influencing user behavior or collecting data.
  Examples: questionnaires, prompts, mini-games, etc.
  end note

  class Questionnaire {
    +questionCount: int
    +estimatedTime: int
  }
  class AlertMessage {
    +questionCount: int
    +estimatedTime: int
  }

  note right of AlertMessage
    Displays general information, warnings, or alerts intended 
    to guide, inform, or prompt the user during interaction.
  end note

  Questionnaire --> Intervention  : "instance of"
  AlertMessage --> Intervention  : "instance of"

  object Intrinsic_Motivation_Inventory 
  Intrinsic_Motivation_Inventory --> Questionnaire : "instance of"

  object User_Engagement_Scale
  User_Engagement_Scale --> Questionnaire : "instance of"

  object SystemNotice
  SystemNotice --> AlertMessage : "instance of"

  object PromptMessage
  PromptMessage --> AlertMessage : "instance of"
}

package Observations #f1f1f1ff{

  legend top right
  Observations: evaluated user/system actions.
  relation to user with user being actor
  observation can trigger a keysituation
  observation produces a measurement
  end legend
  
  class Observation {
    +timestamp: DateTime
    +element
  }

  class UserObservation extends Observation {
  }

  class SystemObservation extends Observation {
  }
  
  note top of Observation
  Observation of User Action or System event, recorded and evaluated by application.
  Can be neutral like click or evaluated like error or success. Stored with TimeStamp.
  end note

  object ClickObservation  {
  } 
  ClickObservation --> UserObservation : "instance of"

  object LoginObservation {
  } 
  LoginObservation --> UserObservation : "instance of"

  object TaskFinishedObservation {
  } 
  TaskFinishedObservation --> UserObservation : "instance of"

  object ErrorCommittedObservation {
  } 
  ErrorCommittedObservation --> UserObservation : "instance of"

  object HourPassedObservation{

  } 
  HourPassedObservation --> SystemObservation : "instance of"

  object DayPassedObservation{ 
  }
  DayPassedObservation --> SystemObservation : "instance of"

  object WeekPassedObservation {
  }
  WeekPassedObservation --> SystemObservation : "instance of"

  object MechanicInteraction {
  }
  MechanicInteraction --> UserObservation : "instance of"
}

package Program_and_Tasks #ebffe8ff {

  class Program #lightgreen {
    +name: String
    +description: String
  }

  note right of Program
  A succession of task blocks (composites).
  end note

  class Task #lightgreen {
    +title: String
    +description: String
  }

  class Level #lightgreen {
    +name: String
    +difficulty: Int
  }

  class Repetitions #lightgreen {
    +count: Int
  }

  note bottom of Level
  Indicates the difficulty of a task. Optional as task might not have difficulty.
  end note

  note bottom of Repetitions
  Indicates the number of repetitions of a task. Mandatory to define program.
  end note

  class TaskRequirement #lightgreen {
    +requiredRepetitions: int
  }

  note left of TaskRequirement
  How many times a Task must be repeated
  on a specific Level within a TaskBlock.
  end note

  class TaskAssignment #lightgreen {
    task: Task
    taskRequirement: TaskRequirement
  }

  note right of TaskAssignment
  Assigns a Task to a TaskBlock and defines
  required repetitions across Levels.
  end note

  class TaskBlock #lightgreen {
    +title: String
    +description: String
    +startDate: DateTime
    +endDate: DateTime
  }

  note right of TaskBlock
  Composite element: groups multiple TaskAssignments and TaskBlocks
  into a hierarchy. Allows nested structures.
  end note

  TaskAssignment --> "1" Task : "has assigned"
  TaskAssignment --> "1..*" TaskRequirement: "has Assigned"
  TaskRequirement --> "0..1" Level : optional
  TaskRequirement --> "1..*" Repetitions : required

  Program *--> "1..*" TaskBlock

  TaskBlock *--> "1..*" TaskAssignment : "contains"

}

package UserModel #fde8ffff {

  class User #f59bff {
  }

  User --> "1" Program : "has"
  User --> "0..* {ordered}" MotivationalState : "has"
  User --> "0..* {ordered}" CognitiveLoadState : "has"

  class MotivationalState #f59bff { 
    +timestamp: DateTime
  }
  together {
    object "…" as OtherMotivationalStates
    object Low
    object Medium
    object High
  }

  Low --> MotivationalState : instance of
  Medium --> MotivationalState : instance of
  High --> MotivationalState : instance of
  OtherMotivationalStates --> MotivationalState : instance of

  class CognitiveLoadState #f59bff { 
    +timestamp: DateTime 
  }

  together {
    object "…" as OtherCognitiveLoadStates
    object Underchallenged
    object OptimalLoad
    object Overloaded
  }

  Underchallenged --> CognitiveLoadState : instance of
  OptimalLoad --> CognitiveLoadState : instance of
  Overloaded --> CognitiveLoadState : instance of
  OtherCognitiveLoadStates --> CognitiveLoadState : instance of

  class UserTraitWeight #f59bff {
    +weight: float  ' (0.0 – 1.0) '
  }

  User --> "0..*" UserTraitWeight : "has"
}


package UserTraits #fcffe8ff {
  class UserTrait {
    +name: string
  }
  together {
    
    class MotivationalTrait extends UserTrait
    note bottom of MotivationalTrait
    MotivationalTrait is a representation of a user's motivational characteristics.
    end note
    hide MotivationalTrait members

    class PlayerType extends UserTrait
    note bottom of PlayerType
    Playertype is a representation of a user's gaming style or approach.
    end note

    object Philanthropist {
      Motivated by Purpose. Philanthropists are altruistic, aiming to enrich the lives of others and make a meaningful impact. They are driven by the desire to give back.
    }
    Philanthropist --> PlayerType : "instance of"

    object Achiever {
      Motivated by Mastery. Achievers seek to learn new skills and continually improve themselves. They thrive on challenges and the satisfaction that comes from overcoming them.
    }
    Achiever --> PlayerType : "instance of"

    object Free_Spirit {
      Motivated by Autonomy. Free Spirits desire the freedom to explore and create. Some are creators at heart, while others are explorers. All share a common need for independence.
    }
    Free_Spirit --> PlayerType : "instance of"

    object Socializer {
      The Socializer is motivated by Relatedness. Socializers enjoy interacting with others and building strong social connections. Their goal is to foster relationships and create a sense of community.
    }
    Socializer --> PlayerType : "instance of"

    object Player {
      The Player is motivated by Rewards. They will do what is needed of them to collect rewards from a system. They are in it for themselves.
    }
    Player --> PlayerType : "instance of"

    object Disruptor {
      The Disruptor is motivated by Change. In general, they want to disrupt your system, either directly or through other users to force positive or negative change.
    }
    Disruptor --> PlayerType : "instance of"

    class DigitalLiteracy extends UserTrait
    hide DigitalLiteracy members
    note bottom of DigitalLiteracy
    Describes a user's familiarity and comfort with digital technologies,
    including software tools, navigation, and basic troubleshooting.
    end note

    class CognitiveAbility extends UserTrait
    hide CognitiveAbility members
    note bottom of CognitiveAbility
    Represents a user's capacity for logical reasoning, memory, and 
    problem-solving. Important for adapting the complexity of tasks.
    end note

    class AttentionSpan extends UserTrait
    hide AttentionSpan members
    note bottom of AttentionSpan
    Describes the user's ability to maintain focus over time. 
    Useful for pacing content and avoiding cognitive overload.
    end note

    class SelfDiscipline extends UserTrait
    hide SelfDiscipline members
    note bottom of SelfDiscipline
    Indicates the user's ability to stay consistent, resist distractions, 
    and complete tasks independently.
    end note

    object FrustrationTolerance
    hide FrustrationTolerance members
    FrustrationTolerance : UserTrait
    FrustrationTolerance : userId = 1
    FrustrationTolerance --> UserTrait : "instance of"

    note bottom of FrustrationTolerance
    Measures how well a user copes with difficulty, failure, or delay. 
    Helpful for adjusting challenge levels and support mechanisms.
    end note
  }
}

package MotivationalMechanics #fff6e8ff {

  left to right direction

  class MotivationalMechanic 
  
  '//----------------------------------Progress Indicators---------------------------------------------'
  class Progress_Indicators extends MotivationalMechanic

  Level_and_Experience_Point_System --> Progress_Indicators : "instance of"

  '//----------------------------------Competition with others---------------------------------------------'
  class Competition_with_others extends MotivationalMechanic
  hide Competition_with_others members

  object Leaderboards {
    As a core progression system, it provides a continuous sense of growth and achievement as users earn XP and unlock new levels or features
  }
  Leaderboards --> Competition_with_others : "instance of"

  '//---------------------------------Personal Goals---------------------------------------------'
  class Personal_Goals extends MotivationalMechanic
  hide Personal_Goals members

  object Self_Assigned_Targets {
    Users define their own objectives.
  }
  Self_Assigned_Targets --> Personal_Goals : "instance of"

  '//---------------------------------Personalization and Creativity---------------------------------------------'
  class Personalization_and_Creativity extends MotivationalMechanic
  hide Personalization_and_Creativity members
  
  object Custom_Player_Made_Content {
    User-generated content in-system.
  }
  Custom_Player_Made_Content --> Personalization_and_Creativity : "instance of"
  
  '//---------------------------------Sharing Achievements with Others---------------------------------------------'
  class Sharing_Achievements extends MotivationalMechanic
  hide Sharing_Achievements members
  object Social_Share_Buttons {
    Sharing accomplishments externally.
  }
  Social_Share_Buttons --> Sharing_Achievements : "instance of"
  
  '//---------------------------------Social Networking---------------------------------------------'
  class Social_Networking extends MotivationalMechanic
  hide Social_Networking members
  object Community_Insights {
    Display others’ behaviors for comparison.
  }

  Community_Insights --> Social_Networking : "instance of"

  '//---------------------------------Surprises and Special Events---------------------------------------------'
  class Surprises_and_Events extends MotivationalMechanic
  hide Surprises_and_Events members
  object Mystery_Boxes {
    Loot boxes with random content.
  }
  Mystery_Boxes --> Surprises_and_Events : "instance of"
  
  '//---------------------------------Motivational Messages---------------------------------------------'
  class Motivational_Messages extends MotivationalMechanic
  hide Motivational_Messages members
  object Encouraging_Messages {
    Positive reinforcement to sustain motivation.
  }
  Encouraging_Messages --> Motivational_Messages : "instance of"
  '//---------------------------------Time-Based Challenges---------------------------------------------'
  class Time_Based_Challenges extends MotivationalMechanic
  hide Time_Based_Challenges members
  object Appointment_Dynamics {
    Scheduled events like Happy Hour.
  }
  Appointment_Dynamics --> Time_Based_Challenges : "instance of"
  '//----------------------------------Rewards and Unlocks---------------------------------------------'
  class Rewards_and_Unlocks extends MotivationalMechanic
  hide Rewards_and_Unlocks members
  object In_Game_Currency {
    Accumulation of virtual money/resources.
  }
  In_Game_Currency --> Rewards_and_Unlocks : "instance of"

  package Usertrait_Mechanic_Mapping {

    class Mapping {
      weight: float
    }
    
    object Level_and_Experience_Point_System_to_Player {
      weight = 0.8
    }
    Level_and_Experience_Point_System_to_Player --> Mapping : "instance of"

    Mapping --> UserTraits.UserTrait : "has"
    Mapping --> UserTraits.UserTrait : "references"
    Mapping --> MotivationalMechanics.MotivationalMechanic : "references"

  }
}

MotivationalMechanics.MotivationalMechanic --> UserModel.UserTraitWeight: "selectedByTraitWeight"
Observations.Observation --> Metrics.MetricComputation : "input"

Interventions.Intervention --> UserModel.MotivationalState : "selectedByCurrentState"
Interventions.Intervention --> "0..*" MotivationalMechanics.MotivationalMechanic : "toggles on/off"

Interventions.Intervention "0..*" --> "0..*" Metrics.Metric : "considers"
Interventions.Intervention "0..*" --> "0..*" UserModel.UserTraitWeight : "considers"

Observations.Observation --> KeySituations.KeySituation : "triggers"

UserModel.MotivationalState --> Metrics.Metric : "reads"
UserModel.CognitiveLoadState --> Metrics.Metric : "reads"

UserModel.UserTraitWeight --> UserTraits.UserTrait : "references"
UserModel.User --> "1..*" Metrics.Metric   : "has"
UserModel.User --> "1..*" Interventions.Intervention   : "receives"
UserModel.User --> "0..*" Observations.Observation : "actor"

UserModel.MotivationalState --> Metrics.WeeklyAdherence : "calculated from"

KeySituations.KeySituation --> Interventions.Intervention : "triggers"
@enduml
