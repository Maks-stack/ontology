@startuml7

skinparam linetype polyline

title Motiva Framework Ontology

package Metrics_and_Measurements {

  class Metric {
    +id: int
    +userId: int
    +timestamp: DateTime
    +value: float
  }

  class MetricComputation {
    +algorithm: String
  }

  MetricComputation --> Metric : "produces"

  Measurement <-- MetricComputation : "reads"

  object MechanicUsageRate
  MechanicUsageRate : Metric
  MechanicUsageRate : userId = 1
  MechanicUsageRate : timestamp = 2023-10-01T12:00:00Z
  MechanicUsageRate --> Metric : "instance of"

  object MechanicDisplayRate
  MechanicDisplayRate : Metric
  MechanicDisplayRate : userId = 1
  MechanicDisplayRate : timestamp = 2023-10-01T12:00:00Z
  MechanicDisplayRate --> Metric : "instance of"

  object MechanicEngagement
  MechanicEngagement : Metric
  MechanicEngagement : userId = 1
  MechanicEngagement : timestamp = 2023-10-01T12:00:00Z
  MechanicEngagement --> Metric : "instance of"

  object SessionDuration
  SessionDuration : userId = 1
  SessionDuration : mechanicId = 101
  SessionDuration : impressionCount = 2
  SessionDuration : timestamp = 2025-04-21T09:00:00Z
  SessionDuration --> Metric : "instance of"

  object ClickRate
  ClickRate : userId = 1
  ClickRate : mechanicId = 101
  ClickRate : impressionCount = 2
  ClickRate : timestamp = 2025-04-21T09:00:00Z
  ClickRate --> Metric : "intance of"

  object Adherence
  Adherence : Metric
  Adherence : userId = 1
  Adherence : timestamp = 2023-10-01T12:00:00Z
  Adherence --> Metric : "instance of"

  object HesitationTime
  HesitationTime : Metric
  HesitationTime : userId = 1
  HesitationTime : timestamp = 2023-10-01T12:00:00Z
  HesitationTime --> Metric : "instance of"

  note as A1
  Percentage of the finished tasks out of the overall prescribed tasks
  end note

  A1 .. Adherence

  class Measurement {
    +id: int
    +userId: int
    +timestamp: DateTime
    +measurementType: MeasurementType
    +value: float
  }

  note top of Measurement
  Represents a direct, single-point observation 
  or quantitative recording of user behavior or 
  state at a given moment in time.

  Examples:
  - Click rate
  - Session duration
  - Number of impressions
  end note

  object mechanicImpression
  mechanicImpression : Measurement
  mechanicImpression : userId = 1
  mechanicImpression : mechanicId = 101
  mechanicImpression : impressionCount = 5
  mechanicImpression : timestamp = 2025-04-21T09:00:00Z

  mechanicImpression ---> Measurement :"instance of"

  note bottom of mechanicImpression
  Captures a one-time measurement of how often
  a specific motivational mechanic was shown or visible 
  to the user at a given point in time.
  Used to support decisions on reinforcing or deactivating it.
  end note

  object Time
  Time : userId = 1
  Time : mechanicId = 101
  Time : impressionCount = 2
  Time : timestamp = 2025-04-21T09:00:00Z
  Time --> Measurement : "instance of"

  ' ðŸ”µ Interaction Object
  object mechanicInteraction
  mechanicInteraction : userId = 1
  mechanicInteraction : mechanicId = 101
  mechanicInteraction : impressionCount = 2
  mechanicInteaction : timestamp = 2025-04-21T09:00:00Z

  mechanicInteractio --> Measurement : "instance of"

  note bottom of mechanicInteraction
  Captures a one-time measurement of how often
  a specific motivational mechanic was used or interacted with 
  by the user at a specific moment.
  Helps evaluate the effectiveness of mechanic engagement.
  end note
}

package KeySituations {

class KeySituation {
  +id: int
  +userId: int
  +timestamp: DateTime
  +mechanicId: int
  +screen: String
  +value: float
  +metadata: Map<String, String>
}

object TaskFinished
TaskFinished : KeySituation
TaskFinished --> KeySituation : "instance of"

object MechanicDisplayed
MechanicDisplayed : KeySituation
MechanicDisplayed --> KeySituation : "instance of"

object MechanicInteraction
MechanicInteraction : KeySituation
MechanicInteraction --> KeySituation : "instance of"

object SessionStarted
SessionStarted : KeySituation
SessionStarted --> KeySituation : "instance of"

object TaskStarted
TaskStarted : KeySituation
TaskStarted --> KeySituation : "instance of"

object TaskEnded
TaskEnded : KeySituation
TaskEnded --> KeySituation : "instance of"

object SessionEnded
SessionEnded : KeySituation
SessionEnded --> KeySituation : "instance of"

object ScreenEntered
ScreenEntered : KeySituation
ScreenEntered --> KeySituation : "instance of"

note left of KeySituation
Generic KeySituation structure used for multiple behavioral logs,
such as screen visits, mechanic usage, and session tracking.
end note

}

package Units {

  class Interval{
    +start: DateTime
    +end: DateTime
  }

  object DailyInterval 
  DailyInterval --> Interval : "instance of"

  object WeeklyInterval 
  WeeklyInterval --> Interval : "instance of"

  object MonthlyInterval
  MonthlyInterval --> Interval : "instance of"
}

package Interventions {
  class Intervention {
    +id: int
    +userId: int
    +timestamp: DateTime
    +screen: String
    +metadata: Map<String, String>
  }

  note right of Intervention
  Represents a planned activity, stimulus, or interaction
  aimed at influencing user behavior or collecting data.
  Examples: questionnaires, prompts, mini-games, etc.
  end note

  class Questionnaire {
    +questionCount: int
    +estimatedTime: int
  }

  Questionnaire --> Intervention : "instance of"
  Intervention --> KeySituation : "triggered by"
  Intervention --> Interval : "triggered by"

  object Intrinsic_Motivation_Inventory 
  Intrinsic_Motivation_Inventory --> Questionnaire : "instance of"

  object User_Engagement_Scale
  User_Engagement_Scale --> Questionnaire : "instance of"

  class MotivationalMessage #cdeaff {
    +id: int
    +text: String
  }
  
  MotivationalMessage --> Intervention : "instance of"

  object MotivationalMessagePM_LOW
  MotivationalMessagePM_LOW : MotivationalMessage
  MotivationalMessagePM_LOW : userId = 1
  MotivationalMessagePM_LOW --> MotivationalMessage : "instance of"
}





package UserActions{

  object Click  {
    +userId: int
    +timestamp: DateTime
    +screen: String
    +metadata: Map<String, String>
  } 
  Click : UserAction
  Click --> UserAction : "instance of"


  class UserAction {
    +id: int
    +userId: int
    +timestamp: DateTime
    +screen: String
    +metadata: Map<String, String>
  }


  object Action {
    +userId: int
    +timestamp: DateTime
    +screen: String
    +metadata: Map<String, String>
  } 
  Action : UserAction
  Action --> UserAction : "instance of"

  UserAction --> KeySituation : "triggers"
  KeySituation --> Measurement : "triggers"
  Measurement --> Metric : "triggers"

}

package Program_and_Tasks {

  class Program #lightgreen {
    +id: int
    +name: String
    +description: String
  }

  note right of Program
  A succession of task blocks (composites).
  end note

  class Task #lightgreen {
    +id: int
    +title: String
    +description: String
    +isMandatory: Boolean
    +completed: Boolean
  }

  class Level #lightgreen {
    +id: int
    +name: String
    +difficulty: Int
    +unlocked: Boolean
  }

  class Repetitions #lightgreen {
    +id: int
    +count: Int
    +completed: Boolean
  }

  note bottom of Level
  Indicates the difficulty of a task. Optional as task might not have difficulty.
  end note

  note bottom of Repetitions
  Indicates the number of repetitions of a task. Mandatory to define program.
  end note

  class TaskRequirement #lightgreen {
    +requiredRepetitions: int
  }

  note left of TaskRequirement
  How many times a Task must be repeated
  on a specific Level within a TaskBlock.
  end note

  class TaskAssignment #lightgreen {
    task: Task

  }

  note right of TaskAssignment
  Assigns a Task to a TaskBlock and defines
  required repetitions across Levels.
  end note

  class TaskBlock #lightgreen {
    +id: int
    +title: String
    +description: String
    +startDate: DateTime
    +endDate: DateTime
  }

  note right of TaskBlock
  Composite element: groups multiple TaskAssignments and TaskBlocks
  into a hierarchy. Allows nested structures.
  end note

  TaskAssignment --> "1" Task : "has assigned"
  TaskAssignment --> "1..*" TaskRequirement: "has Assigned"
  TaskRequirement --> "0..1" Level : optional
  TaskRequirement --> "1..*" Repetitions : required

  Program --> "1..*" TaskBlock

  TaskBlock --> "1..*" TaskAssignment : "contains"

}

package User_and_UserTraits {

  class User #f59bff {
    +id: int
    +UserTraitWeights: List<UserTraitWeight>
  }

  User --> Program : "has assigned"
  User --> UserAction : "performs"

  class UserTrait {
    +id: int
    +name: string
  }
  together {
    class MotivationalTrait extends UserTrait
    note bottom of MotivationalTrait
    MotivationalTrait is a representation of a user's motivational characteristics.
    end note

    class PlayerType extends UserTrait
    note bottom of PlayerType
    Playertype is a representation of a user's gaming style or approach.
    end note

    object Philanthropist {
      Motivated by Purpose. Philanthropists are altruistic, aiming to enrich the lives of others and make a meaningful impact. They are driven by the desire to give back.
    }
    Philanthropist --> PlayerType : "instance of"

    object Achiever {
      Motivated by Mastery. Achievers seek to learn new skills and continually improve themselves. They thrive on challenges and the satisfaction that comes from overcoming them.
    }
    Achiever --> PlayerType : "instance of"

    object Free_Spirit {
      Motivated by Autonomy. Free Spirits desire the freedom to explore and create. Some are creators at heart, while others are explorers. All share a common need for independence.
    }
    Free_Spirit --> PlayerType : "instance of"

    object Socializer {
      The Socializer is motivated by Relatedness. Socializers enjoy interacting with others and building strong social connections. Their goal is to foster relationships and create a sense of community.
    }
    Socializer --> PlayerType : "instance of"

    object Player {
      The Player is motivated by Rewards. They will do what is needed of them to collect rewards from a system. They are in it for themselves.
    }
    Player --> PlayerType : "instance of"

    object Disruptor {
      The Disruptor is motivated by Change. In general, they want to disrupt your system, either directly or through other users to force positive or negative change.
    }
    Disruptor --> PlayerType : "instance of"


    class DigitalLiteracy extends UserTrait
    note bottom of DigitalLiteracy
    Describes a user's familiarity and comfort with digital technologies,
    including software tools, navigation, and basic troubleshooting.
    end note

    class CognitiveAbility extends UserTrait
    note bottom of CognitiveAbility
    Represents a user's capacity for logical reasoning, memory, and 
    problem-solving. Important for adapting the complexity of tasks.
    end note

    class AttentionSpan extends UserTrait
    note bottom of AttentionSpan
    Describes the user's ability to maintain focus over time. 
    Useful for pacing content and avoiding cognitive overload.
    end note

    class SelfDiscipline extends UserTrait
    note bottom of SelfDiscipline
    Indicates the user's ability to stay consistent, resist distractions, 
    and complete tasks independently.
    end note

    object FrustrationTolerance
    FrustrationTolerance : UserTrait
    FrustrationTolerance : userId = 1
    FrustrationTolerance --> UserTrait : "instance of"

    note bottom of FrustrationTolerance
    Measures how well a user copes with difficulty, failure, or delay. 
    Helpful for adjusting challenge levels and support mechanisms.
    end note
  }

  class UserTraitWeight #f59bff {
    +trait: UserTrait
    +weight: float  ' (0.0 â€“ 1.0) '
  }

  User --> "0..*" UserTraitWeight : "has"
  UserTraitWeight --> UserTrait : "references"

  class UserTraitWeight #f59bff{
    +userId: int
    +traitId: int
    +userTrait: UserTrait
    +weight: float  ' (0.0 â€“ 1.0) '
  }
}

package MotivationalState_and_CognitiveLoadState {

  class MotivationalState { 
    - state: MotivationalStates
    + isHigh(): boolean
    + isMedium(): boolean
    + isLow(): boolean
  }

  MotivationalState --> Metric : "calculated from"
  MotivationalState --> Program : "calculated from"
  MotivationalState <-- MotivationalMessage : "selected based on"

  object Low
  Low : MotivationalState
  Low : userId = 1
  Low --> MotivationalState : "instance of"

  object Medium
  Medium : MotivationalState
  Medium : userId = 1
  Medium --> MotivationalState : "instance of"

  object High
  High : MotivationalState
  High : userId = 1
  High --> MotivationalState : "instance of"


  class CognitiveLoadState {
  }

  CognitiveLoadState --> Metric : "calculated from"

  object UnderchallengedState
  UnderchallengedState : CognitiveLoadState
  UnderchallengedState : userId = 1
  UnderchallengedState --> CognitiveLoadState : "instance of"

  object OptimalLoadState
  OptimalLoadState : CognitiveLoadState
  OptimalLoadState : userId = 1
  OptimalLoadState --> CognitiveLoadState : "instance of"

  object OverloadedState
  OverloadedState : CognitiveLoadState
  OverloadedState : userId = 1
  OverloadedState --> CognitiveLoadState : "instance of"
}

package Usertrait_Mechanic_Mapping {

  class MechanicTraitWeight #9bfbff {
    +mechanicId: int
    +userTrait: UserTrait
    +weight: float  ' (0.0 â€“ 1.0) '
  }

  class Mapping {
    Trait : UserTrait
    Mechanic: MotivationalMechanic
    weight: float
  }
  Mapping --> UserTrait : "has"

  object Narrative_GT10_to_Philantropist {
    Trait = Philantropist
    Mechanic = Narrative_GT10
    weight = 0.8
  }
  Narrative_GT10_to_Philantropist : Mapping
  Narrative_GT10_to_Philantropist --> Mapping : "instance of"

  Narrative_GT10_to_Philantropist --> Philanthropist : "corresponds to"
  Narrative_GT10_to_Philantropist --> Narrative_GT10 : "corresponds by"
}

HesitationTime --> Time : "computed from"
HesitationTime --> Click : "computed from"
HesitationTime --> ScreenEntered : "computed from"

package "MotivationalMechanics" {

  left to right direction
  class MechanicCategory
  class GameMechanic 

  GameMechanic --> Mapping: "selected based on"
  

  '//----------------------------------Progress Indicators---------------------------------------------'
  object Progress_Indicators {
    MechanicCategory
  }
  Progress_Indicators --> MechanicCategory : "instance of"
    object Level_and_Experience_Point_System {
    As a core progression system, it provides a continuous sense of growth and achievement as users earn XP and unlock new levels or features
  }
  Level_and_Experience_Point_System --> GameMechanic : "instance of"
  Level_and_Experience_Point_System --> Progress_Indicators : "categorized into"

  
  '//----------------------------------Competition with others---------------------------------------------'
  object Competition_with_others {
    MechanicCategory
  }
  Competition_with_others --> MechanicCategory : "instance of"
    object Leaderboards {
    As a core progression system, it provides a continuous sense of growth and achievement as users earn XP and unlock new levels or features
  }
  Leaderboards --> GameMechanic : "instance of"
  Leaderboards --> Competition_with_others : "categorized into"

  '//---------------------------------Personal Goals---------------------------------------------'
  object Personal_Goals {
    MechanicCategory
  }
  Personal_Goals --> MechanicCategory : "instance of"
  object Self_Assigned_Targets {
    Users define their own objectives.
  }
  Self_Assigned_Targets --> GameMechanic : "instance of"
  Self_Assigned_Targets --> Personal_Goals : "categorized into"

  '//---------------------------------Personalization and Creativity---------------------------------------------'
  object Personalization_and_Creativity {
    MechanicCategory
  }
  Personalization_and_Creativity --> MechanicCategory : "instance of"
  object Custom_Player_Made_Content {
    User-generated content in-system.
  }
  Custom_Player_Made_Content --> GameMechanic : "instance of"
  Custom_Player_Made_Content --> Personalization_and_Creativity : "categorized into"

  '//---------------------------------Sharing Achievements with Others---------------------------------------------'
  object Sharing_Achievements {
    MechanicCategory
  }
  Sharing_Achievements --> MechanicCategory : "instance of"
  
  object Social_Share_Buttons {
    Sharing accomplishments externally.
  }
  Social_Share_Buttons --> GameMechanic : "instance of"
  Social_Share_Buttons --> Sharing_Achievements : "categorized into"

  '//---------------------------------Social Networking---------------------------------------------'
  object Social_Networking {
    MechanicCategory
  }
  object Community_Insights {
    Display othersâ€™ behaviors for comparison.
  }
  Community_Insights --> MechanicCategory : "instance of"
  Community_Insights --> GameMechanic : "instance of"
  Community_Insights --> Social_Networking : "categorized into"

  '//---------------------------------Surprises and Special Events---------------------------------------------'
  object Surprises_and_Events {
    MechanicCategory
  }
  object Mystery_Boxes {
    Loot boxes with random content.
  }
  Mystery_Boxes --> MechanicCategory : "instance of"
  Mystery_Boxes --> GameMechanic : "instance of"
  Mystery_Boxes --> Surprises_and_Events : "categorized into"

  '//---------------------------------Motivational Messages---------------------------------------------'
  object Motivational_Messages {
    MechanicCategory
  }
  object Encouraging_Messages {
    Positive reinforcement to sustain motivation.
  }
  Encouraging_Messages --> MechanicCategory : "instance of"
  Encouraging_Messages --> GameMechanic : "instance of"
  Encouraging_Messages --> Motivational_Messages : "categorized into"

  '//---------------------------------Time-Based Challenges---------------------------------------------'
  object Time_Based_Challenges {
    MechanicCategory
  }
  object Appointment_Dynamics {
    Scheduled events like Happy Hour.
  }
  Appointment_Dynamics --> MechanicCategory : "instance of"
  Appointment_Dynamics --> GameMechanic : "instance of"
  Appointment_Dynamics --> Time_Based_Challenges : "categorized into"

  '//----------------------------------Rewards and Unlocks---------------------------------------------'
  object Rewards_and_Unlocks {
    MechanicCategory
  }
  object In_Game_Currency {
    Accumulation of virtual money/resources.
  }
  In_Game_Currency --> MechanicCategory : "instance of"
  In_Game_Currency --> GameMechanic : "instance of"
  In_Game_Currency --> Rewards_and_Unlocks : "categorized into"

}
@enduml7

